/*
 *
 * www.jinvovo.com Inc
 * Copyright (c) 2017 All Rights Reserved.
 *
 */
package com.jvv.gateway.dal.mybatis;

import org.apache.ibatis.annotations.Param;
import org.springframework.stereotype.Service;

import org.mybatis.spring.support.SqlSessionDaoSupport;
import com.jvv.gateway.dal.mapper.UserMessageRecordLogMapper;


import com.jvv.gateway.dal.entity.UserMessageRecordLogDO;
import java.util.List;
import java.util.Map;
	import java.util.HashMap;
	
/**
 * An mybatis based implementation of dao interface <tt>com.jvv.gateway.dal.mapper.UserMessageRecordLogMapper</tt>.
 *
 * This file is generated by <tt>iwallet-dalgen</tt>, a DAL (Data Access Layer)
 * code generation utility specially developed for <tt>iwallet</tt> project.
 * 
 * PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may
 * be OVERWRITTEN by someone else. To modify the file, you should go to 
 * directory <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and 
 * find the corresponding configuration file (<tt>tables/user_message_record_log.xml</tt>). 
 * Modify the configuration file according to your needs, then run <tt>iwallet-dalgen</tt> 
 * to generate this file.
 *
 * @author Cheng Li
 * @author Turalyon
 */ 
@SuppressWarnings({ "unchecked", "rawtypes" })

@Service("userMessageRecordLogMapper")
public class MybatisUserMessageRecordLogImpl extends SqlSessionDaoSupport implements UserMessageRecordLogMapper {
	/**
	 *  Insert one <tt>UserMessageRecordLogDO</tt> object to DB table <tt>user_message_record_log</tt>, return primary key
	 *
	 * 插入数据
     * <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>insert into user_message_record_log(id,log_id,send_time,send_content,receive_phone,send_phone,msg_type,is_sucess,msg_channel,user_id,createtime,result_code,result_message) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)</tt>
	 *
	 *	@param userMessageRecordLog
	 *	@return int
	 */	 

    public int insert( @Param("userMessageRecordLog")UserMessageRecordLogDO userMessageRecordLog) {
    	if (userMessageRecordLog == null) {
    		throw new IllegalArgumentException("Can't insert a null data object into db.");
    	}

        Map<String,Object> _param = new HashMap<String,Object>();
    
        _param.put("userMessageRecordLog", userMessageRecordLog);
        _param.put("value", userMessageRecordLog);
    

        return  getSqlSession().insert(UserMessageRecordLogMapper.class.getName() + ".insert", _param);

    }

	/**
	 *  Query DB table <tt>user_message_record_log</tt> for records.
	 *
	 * 
     * <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from user_message_record_log</tt>
	 *
	 *	@param userMessageRecordLog
	 *	@param start
	 *	@param pageSize
	 *	@return List<UserMessageRecordLogDO>
	 */	 

    public List<UserMessageRecordLogDO> query( @Param("userMessageRecordLog")UserMessageRecordLogDO userMessageRecordLog,  @Param("start")long start,  @Param("pageSize")int pageSize) {
    	if (userMessageRecordLog == null) {
    		throw new IllegalArgumentException("Can't select by a null data object.");
    	}

        Map<String,Object> _param = new HashMap<String,Object>();

            _param.put("userMessageRecordLog", userMessageRecordLog);
        _param.put("start", new Long(start));
        _param.put("pageSize", new Integer(pageSize));


        return getSqlSession().selectList(UserMessageRecordLogMapper.class.getName() + ".query", _param);

    }

	/**
	 *  Query DB table <tt>user_message_record_log</tt> for records.
	 *
	 * 
     * <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select COUNT(*) from user_message_record_log</tt>
	 *
	 *	@param userMessageRecordLog
	 *	@return long
	 */	 

    public long queryCount( @Param("userMessageRecordLog")UserMessageRecordLogDO userMessageRecordLog) {
    	if (userMessageRecordLog == null) {
    		throw new IllegalArgumentException("Can't select by a null data object.");
    	}

        Map<String,Object> _param = new HashMap<String,Object>();
    
        _param.put("userMessageRecordLog", userMessageRecordLog);
        _param.put("value", userMessageRecordLog);
    


	    Long retObj = (Long) getSqlSession().selectOne(UserMessageRecordLogMapper.class.getName() + ".queryCount", _param);

		if (retObj == null) {
		    return 0;
		} else {
		    return retObj.longValue();
		}

    }

	/**
	 *  Update DB table <tt>user_message_record_log</tt>.
	 *
	 * 
     * <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update user_message_record_log set log_id=? where (id = ?)</tt>
	 *
	 *	@param userMessageRecordLog
	 *	@return int
	 */	 

    public int update( @Param("userMessageRecordLog")UserMessageRecordLogDO userMessageRecordLog) {
    	if (userMessageRecordLog == null) {
    		throw new IllegalArgumentException("Can't update by a null data object.");
    	}

        Map<String,Object> _param = new HashMap<String,Object>();
    
        _param.put("userMessageRecordLog", userMessageRecordLog);
        _param.put("value", userMessageRecordLog);
    

        return getSqlSession().update(UserMessageRecordLogMapper.class.getName() + ".update", _param);
    }

	/**
	 *  Delete records from DB table <tt>user_message_record_log</tt>.
	 *
	 * 根据主键删除数据
     * <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from user_message_record_log where (id = ?)</tt>
	 *
	 *	@param id
	 *	@return int
	 */	 

    public int delete( @Param("id")Long id) {
        Map<String,Object> _param = new HashMap<String,Object>();
    
        _param.put("id", id);
        _param.put("value", id);
    

        return getSqlSession().delete(UserMessageRecordLogMapper.class.getName() + ".delete", _param);
    }

	/**
	 *  Query DB table <tt>user_message_record_log</tt> for records.
	 *
	 * 
     * <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from user_message_record_log userMessageRecordLog where (id = ?)</tt>
	 *
	 *	@param id
	 *	@return UserMessageRecordLogDO
	 */	 

    public UserMessageRecordLogDO findById( @Param("id")Long id) {

        Map<String,Object> _param = new HashMap<String,Object>();
    
        _param.put("id", id);
        _param.put("value", id);
    

        return (UserMessageRecordLogDO) getSqlSession().selectOne(UserMessageRecordLogMapper.class.getName() + ".findById", _param);

    }

	/**
	 *  Query DB table <tt>user_message_record_log</tt> for records.
	 *
	 * 
     * <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from user_message_record_log</tt>
	 *
	 *	@param idList
	 *	@return List<UserMessageRecordLogDO>
	 */	 

    public List<UserMessageRecordLogDO> findByIdIn( @Param("idList")List idList) {

        Map<String,Object> _param = new HashMap<String,Object>();
    
        _param.put("idList", idList);
        _param.put("value", idList);
    

        return getSqlSession().selectList(UserMessageRecordLogMapper.class.getName() + ".findByIdIn", _param);

    }
	
	@Override
	public int querySmsRecordByChannel (@Param("beginDate") String beginDate,
	                                                    @Param("endDate") String endDate,
	                                                    @Param("channelType") String channelType,
	                                                    @Param ("success") Integer success) {
		Map<String,Object> _param = new HashMap<String,Object>();
		
		_param.put("beginDate", beginDate);
		_param.put("endDate", endDate);
		_param.put("channelType", channelType);
		_param.put("success", success);
		
		
		return getSqlSession().selectOne (UserMessageRecordLogMapper.class.getName() + ".querySmsRecordByChannel", _param);
		
	}
	
	

	/**
	 *  Query DB table <tt>user_message_record_log</tt> for records.
	 *
	 *
     * <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from user_message_record_log userMessageRecordLog where (log_id = ?)</tt>
	 *
	 *	@param logId
	 *	@return UserMessageRecordLogDO
	 */

    public UserMessageRecordLogDO findByLogId( @Param("logId")String logId) {

        Map<String,Object> _param = new HashMap<String,Object>();
    
        _param.put("logId", logId);
        _param.put("value", logId);
    

        return (UserMessageRecordLogDO) getSqlSession().selectOne(UserMessageRecordLogMapper.class.getName() + ".findByLogId", _param);

    }

	/**
	 *  Update DB table <tt>user_message_record_log</tt>.
	 *
	 *
     * <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update user_message_record_log set send_time=? where (id = ?)</tt>
	 *
	 *	@param userMessageRecordLog
	 *	@return int
	 */

    public int updateByLogId( @Param("userMessageRecordLog")UserMessageRecordLogDO userMessageRecordLog) {
    	if (userMessageRecordLog == null) {
    		throw new IllegalArgumentException("Can't update by a null data object.");
    	}

        Map<String,Object> _param = new HashMap<String,Object>();
    
        _param.put("userMessageRecordLog", userMessageRecordLog);
        _param.put("value", userMessageRecordLog);
    

        return getSqlSession().update(UserMessageRecordLogMapper.class.getName() + ".updateByLogId", _param);
    }

	/**
	 *  Delete records from DB table <tt>user_message_record_log</tt>.
	 *
	 * 根据主键删除数据
     * <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from user_message_record_log where (log_id = ?)</tt>
	 *
	 *	@param logId
	 *	@return int
	 */

    public int deleteByLogId( @Param("logId")String logId) {
        Map<String,Object> _param = new HashMap<String,Object>();
    
        _param.put("logId", logId);
        _param.put("value", logId);
    

        return getSqlSession().delete(UserMessageRecordLogMapper.class.getName() + ".deleteByLogId", _param);
    }

	/**
	 *  Query DB table <tt>user_message_record_log</tt> for records.
	 *
	 *
     * <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from user_message_record_log</tt>
	 *
	 *	@param logIdList
	 *	@return List<UserMessageRecordLogDO>
	 */

    public List<UserMessageRecordLogDO> findByLogIdIn( @Param("logIdList")List logIdList) {

        Map<String,Object> _param = new HashMap<String,Object>();
    
        _param.put("logIdList", logIdList);
        _param.put("value", logIdList);
    

        return getSqlSession().selectList(UserMessageRecordLogMapper.class.getName() + ".findByLogIdIn", _param);

    }


}