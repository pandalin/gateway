/*
 *
 * www.jinvovo.com Inc
 * Copyright (c) 2017 All Rights Reserved.
 *
 */
package com.jvv.gateway.dal.mybatis;

import org.apache.ibatis.annotations.Param;
import org.springframework.context.annotation.Lazy;
import org.springframework.stereotype.Service;

import org.mybatis.spring.support.SqlSessionDaoSupport;
import com.jvv.gateway.dal.mapper.TelephoneBillPrepaidMapper;


import com.jvv.gateway.dal.entity.TelephoneBillPrepaidDO;
import java.util.List;
import java.util.Map;
	import java.util.HashMap;
	
/**
 * An mybatis based implementation of dao interface <tt>com.jvv.gateway.dal.mapper.TelephoneBillPrepaidMapper</tt>.
 *
 * This file is generated by <tt>iwallet-dalgen</tt>, a DAL (Data Access Layer)
 * code generation utility specially developed for <tt>iwallet</tt> project.
 * 
 * PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may
 * be OVERWRITTEN by someone else. To modify the file, you should go to 
 * directory <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and 
 * find the corresponding configuration file (<tt>tables/telephone_bill_prepaid.xml</tt>). 
 * Modify the configuration file according to your needs, then run <tt>iwallet-dalgen</tt> 
 * to generate this file.
 *
 * @author Cheng Li
 * @author Turalyon
 */ 
@SuppressWarnings({ "unchecked", "rawtypes" })

@Lazy
@Service("telephoneBillPrepaidMapper")
public class MybatisTelephoneBillPrepaidImpl extends SqlSessionDaoSupport implements TelephoneBillPrepaidMapper {
	/**
	 *  Insert one <tt>TelephoneBillPrepaidDO</tt> object to DB table <tt>telephone_bill_prepaid</tt>, return primary key
	 *
	 * 插入数据
     * <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>insert into telephone_bill_prepaid(order_no,channel_api,phone_no,currency,amount,status,trans_date,result_code,result_message,raw_add_time,raw_update_time) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)</tt>
	 *
	 *	@param telephoneBillPrepaid
	 *	@return int
	 */	 

    public int insert( @Param("telephoneBillPrepaid")TelephoneBillPrepaidDO telephoneBillPrepaid) {
    	if (telephoneBillPrepaid == null) {
    		throw new IllegalArgumentException("Can't insert a null data object into db.");
    	}

        Map<String,Object> _param = new HashMap<String,Object>();
    
        _param.put("telephoneBillPrepaid", telephoneBillPrepaid);
        _param.put("value", telephoneBillPrepaid);
    

        return  getSqlSession().insert(TelephoneBillPrepaidMapper.class.getName() + ".insert", _param);

    }


	/**
	 *  Query DB table <tt>telephone_bill_prepaid</tt> for records.
	 *
	 * 
     * <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from telephone_bill_prepaid</tt>
	 *
	 *	@param telephoneBillPrepaid
	 *	@param start
	 *	@param pageSize
	 *	@return List<TelephoneBillPrepaidDO>
	 */	 

    public List<TelephoneBillPrepaidDO> query( @Param("telephoneBillPrepaid")TelephoneBillPrepaidDO telephoneBillPrepaid,  @Param("start")long start,  @Param("pageSize")int pageSize) {
    	if (telephoneBillPrepaid == null) {
    		throw new IllegalArgumentException("Can't select by a null data object.");
    	}

        Map<String,Object> _param = new HashMap<String,Object>();

            _param.put("telephoneBillPrepaid", telephoneBillPrepaid);
        _param.put("start", new Long(start));
        _param.put("pageSize", new Integer(pageSize));


        return getSqlSession().selectList(TelephoneBillPrepaidMapper.class.getName() + ".query", _param);

    }


	/**
	 *  Query DB table <tt>telephone_bill_prepaid</tt> for records.
	 *
	 * 
     * <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select COUNT(*) from telephone_bill_prepaid</tt>
	 *
	 *	@param telephoneBillPrepaid
	 *	@return long
	 */	 

    public long queryCount( @Param("telephoneBillPrepaid")TelephoneBillPrepaidDO telephoneBillPrepaid) {
    	if (telephoneBillPrepaid == null) {
    		throw new IllegalArgumentException("Can't select by a null data object.");
    	}

        Map<String,Object> _param = new HashMap<String,Object>();
    
        _param.put("telephoneBillPrepaid", telephoneBillPrepaid);
        _param.put("value", telephoneBillPrepaid);
    


	    Long retObj = (Long) getSqlSession().selectOne(TelephoneBillPrepaidMapper.class.getName() + ".queryCount", _param);

		if (retObj == null) {
		    return 0;
		} else {
		    return retObj.longValue();
		}

    }


	/**
	 *  Update DB table <tt>telephone_bill_prepaid</tt>.
	 *
	 * 
     * <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update telephone_bill_prepaid set order_no=? where (id = ?)</tt>
	 *
	 *	@param telephoneBillPrepaid
	 *	@return int
	 */	 

    public int update( @Param("telephoneBillPrepaid")TelephoneBillPrepaidDO telephoneBillPrepaid) {
    	if (telephoneBillPrepaid == null) {
    		throw new IllegalArgumentException("Can't update by a null data object.");
    	}

        Map<String,Object> _param = new HashMap<String,Object>();
    
        _param.put("telephoneBillPrepaid", telephoneBillPrepaid);
        _param.put("value", telephoneBillPrepaid);
    

        return getSqlSession().update(TelephoneBillPrepaidMapper.class.getName() + ".update", _param);
    }


	/**
	 *  Delete records from DB table <tt>telephone_bill_prepaid</tt>.
	 *
	 * 根据主键删除数据
     * <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from telephone_bill_prepaid where (id = ?)</tt>
	 *
	 *	@param id
	 *	@return int
	 */	 

    public int delete( @Param("id")Long id) {
        Map<String,Object> _param = new HashMap<String,Object>();
    
        _param.put("id", id);
        _param.put("value", id);
    

        return getSqlSession().delete(TelephoneBillPrepaidMapper.class.getName() + ".delete", _param);
    }


	/**
	 *  Query DB table <tt>telephone_bill_prepaid</tt> for records.
	 *
	 * 
     * <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from telephone_bill_prepaid telephoneBillPrepaid where (order_no = ?)</tt>
	 *
	 *	@param orderNo
	 *	@return TelephoneBillPrepaidDO
	 */	 

    public TelephoneBillPrepaidDO findByOrderNo( @Param("orderNo")String orderNo) {

        Map<String,Object> _param = new HashMap<String,Object>();
    
        _param.put("orderNo", orderNo);
        _param.put("value", orderNo);
    

        return (TelephoneBillPrepaidDO) getSqlSession().selectOne(TelephoneBillPrepaidMapper.class.getName() + ".findByOrderNo", _param);

    }


	/**
	 *  Update DB table <tt>telephone_bill_prepaid</tt>.
	 *
	 * 
     * <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update telephone_bill_prepaid set channel_api=? where (id = ?)</tt>
	 *
	 *	@param telephoneBillPrepaid
	 *	@return int
	 */	 

    public int updateByOrderNo( @Param("telephoneBillPrepaid")TelephoneBillPrepaidDO telephoneBillPrepaid) {
    	if (telephoneBillPrepaid == null) {
    		throw new IllegalArgumentException("Can't update by a null data object.");
    	}

        Map<String,Object> _param = new HashMap<String,Object>();
    
        _param.put("telephoneBillPrepaid", telephoneBillPrepaid);
        _param.put("value", telephoneBillPrepaid);
    

        return getSqlSession().update(TelephoneBillPrepaidMapper.class.getName() + ".updateByOrderNo", _param);
    }


	/**
	 *  Delete records from DB table <tt>telephone_bill_prepaid</tt>.
	 *
	 * 根据主键删除数据
     * <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from telephone_bill_prepaid where (order_no = ?)</tt>
	 *
	 *	@param orderNo
	 *	@return int
	 */	 

    public int deleteByOrderNo( @Param("orderNo")String orderNo) {
        Map<String,Object> _param = new HashMap<String,Object>();
    
        _param.put("orderNo", orderNo);
        _param.put("value", orderNo);
    

        return getSqlSession().delete(TelephoneBillPrepaidMapper.class.getName() + ".deleteByOrderNo", _param);
    }


	/**
	 *  Query DB table <tt>telephone_bill_prepaid</tt> for records.
	 *
	 * 
     * <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from telephone_bill_prepaid</tt>
	 *
	 *	@param orderNoList
	 *	@return List<TelephoneBillPrepaidDO>
	 */	 

    public List<TelephoneBillPrepaidDO> findByOrderNoIn( @Param("orderNoList")List orderNoList) {

        Map<String,Object> _param = new HashMap<String,Object>();
    
        _param.put("orderNoList", orderNoList);
        _param.put("value", orderNoList);
    

        return getSqlSession().selectList(TelephoneBillPrepaidMapper.class.getName() + ".findByOrderNoIn", _param);

    }


	/**
	 *  Query DB table <tt>telephone_bill_prepaid</tt> for records.
	 *
	 * 
     * <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from telephone_bill_prepaid telephoneBillPrepaid where (id = ?)</tt>
	 *
	 *	@param id
	 *	@return TelephoneBillPrepaidDO
	 */	 

    public TelephoneBillPrepaidDO findById( @Param("id")Long id) {

        Map<String,Object> _param = new HashMap<String,Object>();
    
        _param.put("id", id);
        _param.put("value", id);
    

        return (TelephoneBillPrepaidDO) getSqlSession().selectOne(TelephoneBillPrepaidMapper.class.getName() + ".findById", _param);

    }


	/**
	 *  Query DB table <tt>telephone_bill_prepaid</tt> for records.
	 *
	 * 
     * <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from telephone_bill_prepaid</tt>
	 *
	 *	@param idList
	 *	@return List<TelephoneBillPrepaidDO>
	 */	 

    public List<TelephoneBillPrepaidDO> findByIdIn( @Param("idList")List idList) {

        Map<String,Object> _param = new HashMap<String,Object>();
    
        _param.put("idList", idList);
        _param.put("value", idList);
    

        return getSqlSession().selectList(TelephoneBillPrepaidMapper.class.getName() + ".findByIdIn", _param);

    }



}
